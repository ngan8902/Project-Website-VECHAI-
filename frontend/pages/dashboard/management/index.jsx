import dynamic from "next/dynamic";
import Head from "next/head";
import { useState, useEffect } from "react";
import _ from "lodash";
import {Modal, ModalHeader, ModalBody} from 'reactstrap';

import Layout from "@/components/layout";
import axios from "@/helper/axios.helper";
import { pages } from "@/utils/contanst";
import CreateYard from "@/components/createYard";
import TableScrapYard from "@/components/tableScrapYard";

export async function getServerSideProps({ req, res }) {
    const token = req.cookies["vechaitoken"];
    const { data } = await axios({
        url: "/api/customer/getbytoken",
        method: "GET",
        headers: { authorization: token },
    });
    if (!data) NextResponse.redirect(new URL("/login", req.url));

    return {
        props: {
            userData: data[0] || {},
        },
    };
}

export default function YardManage({ userData }) {
    const Map = dynamic(() => import("@/components/Map"), {
        ssr: false,
        loading: () => <p>Loading...</p>,
    });

    const { fullname, name, email, accessApp } = userData;
    const [layoutPages, setLayoutPages] = useState([]);
    const [yards, setYards] = useState([]);

    useEffect(() => {
        detectAccessPage()
        refreshData()
    }, []);

    const refreshData = () => {
        axios.get("/api/yard").then((res) => {
            if (res && res.data) {
                const { data } = res.data;
                data.forEach(yard => {
                    if(!yard["lag_lat"]) return
                    yard["position"] = yard["lag_lat"].split(', ')
                    yard["popupContent"] = yard.address
                });
                setYards(data);
            }
        });
    }

    const detectAccessPage = () => {
        const accessAppsList = accessApp.split(", ");
        if (accessAppsList && Array.isArray(accessAppsList)) {
            const userPages = _.filter(pages, (page) => {
                return accessAppsList.includes(page.key);
            });
            setLayoutPages(userPages);
        }
    }

    const [modal, setModal] = useState(false);
    const toggle = () => setModal(!modal);

    const handleCreatedCB = () => {
        refreshData()
        setModal(false)
    }

    const handleClosePost = () => {
        setModal(false)
    }


    return (
        <>
            <Head>
                <title>Quản lý vựa</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="ico" href="/favicon.ico"></link>
            </Head>
            <main>
                <Layout pages={layoutPages} user={{ fullname, name, email }}>
                    
                    <div>
                        <h2 className="title-manage">Quản lý vựa VeChai</h2>
                        <p style={{ color: 'rgb(122, 64, 222)', cursor: 'pointer' }} onClick={toggle}>Thêm vựa</p>
                    </div>
                    <div className="table-manage">
                        <div className="map-yard">
                            <Map markerList={yards} ></Map>
                        </div>
                        <TableScrapYard yards={yards}></TableScrapYard>
                    </div>

                    <Modal className="model-detail" isOpen={modal} toggle={toggle}>
                        <ModalHeader><span style={{ color: "black", width: '140px', padding: '8px' }}>Thêm Vựa VeChai</span></ModalHeader>
                        <ModalBody>
                            <CreateYard userData={userData} handleCreatedCB={handleCreatedCB} handleClosePost={handleClosePost}></CreateYard>
                        </ModalBody>
                    </Modal>
                </Layout>
            </main>
        </>
    );

}
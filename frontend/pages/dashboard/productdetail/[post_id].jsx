import { useRouter} from 'next/router'
import Head from "next/head";
import { useState, useEffect } from "react";
import _ from "lodash";
import axios from "@/helper/axios.helper";
import Image from 'next/image';
import { useParams } from 'next/navigation'

import Layout from "@/components/layout";
import { pages } from "@/utils/contanst";


export async function getServerSideProps({ req }) {
    const token = req.cookies["vechaitoken"];
    const { data } = await axios({
        url: "/api/customer/getbytoken",
        method: "GET",
        headers: { authorization: token },
    });
    if (!data) NextResponse.redirect(new URL("/login", req.url));

    return {
        props: {
            userData: data[0] || {},
        },
    };
}

export default function ProductDetail({ userData }) {
    const { fullname, name, email, accessApp } = userData;
    const [post, setPost] = useState([])
    const [layoutPages, setLayoutPages] = useState([]);
    const router = useRouter()
    const { postID } = router.query;
   

    useEffect(() => {
        detectAccessPage()
        refreshPostsDetail()
    }, []);

    const refreshPostsDetail = () => {
        axios.get('/api/post/detail').then((res) => {
            console.log(res);
            if (res && res.data) {
                const { data } = res.data;
                setPost(data);
            }
        });
    }


    const detectAccessPage = () => {
        const accessAppsList = accessApp.split(", ");
        if (accessAppsList && Array.isArray(accessAppsList)) {
            const userPages = _.filter(pages, (page) => {
                return accessAppsList.includes(page.key);
            });
            setLayoutPages(userPages);
        }
    }

    function formatMoney(amount, decimalCount = 2, decimal = ".", thousands = ",") {
        try {
            decimalCount = Math.abs(decimalCount);
            decimalCount = isNaN(decimalCount) ? 2 : decimalCount;

            const negativeSign = amount < 0 ? "-" : "";

            let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
            let j = (i.length > 3) ? i.length % 3 : 0;

            return negativeSign +
                (j ? i.substr(0, j) + thousands : '') +
                i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) +
                (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
        } catch (e) {
            console.log(e)
        }
    };

    const onClickNegotiate = () => {
        console.log("test")
    }


    return (
        <>
            <Head>
                <title>Chi tiết sản phẩm</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="ico" href="/favicon.ico"></link>
            </Head>
            <main>
                <Layout pages={layoutPages} user={{ fullname, name, email }}>
                    <p hidden> {postID}</p>
                    <div>
                    </div>
                </Layout>
            </main>
        </>

    )
}